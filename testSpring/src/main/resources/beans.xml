<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--扫描 给定包下的注解-->
    <context:component-scan base-package="pojo"/>
    <!--配置注解的支持 然后bean 会通过注解自动注入-->
<!--    <context:annotation-config/>-->


<!--    <bean id="hello" class="pojo.Hello">-->
<!--        <property name="str" value="tian"/>-->
<!--    </bean>-->
<!--    <bean id="student" class="pojo.Student"/>-->
<!--    <bean id="address" class="pojo.Address"/>-->

    <!--注册bean-->
    <bean id="userService" class="dynamicProxy.UserServiceImpl"/>
<!--    <bean id="beforelog" class="log.BeforeLog"/>-->
<!--    <bean id="afterLog" class="log.AfterLog"/>-->
    <bean id="customLog" class="log.CustomLog"/>


<!--    &lt;!&ndash;方式一 aop的配置&ndash;&gt;-->
<!--    <aop:config>-->

<!--        &lt;!&ndash;切入点 expression:表达式匹配要执行的方法 &ndash;&gt;-->
<!--&lt;!&ndash;        execution(修饰符  返回值  包.类.方法名(参数) throws异常)&ndash;&gt;-->
<!--&lt;!&ndash;        execution(<修饰符模式>?<返回类型模式><方法名模式>(<参数模式>)<异常模式>?)&ndash;&gt;-->
<!--&lt;!&ndash;        execution(* dynamicProxy.UserServiceImpl.*(..))&ndash;&gt;-->
<!--&lt;!&ndash;        第一个 * 代表任意返回类型&ndash;&gt;-->
<!--&lt;!&ndash;        dynamicProxy.UserServiceImpl.* 代表匹配 UserServiceImpl下的所有方法&ndash;&gt;-->
<!--&lt;!&ndash;        (..) 代表 匹配任何数量参数&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* dynamicProxy.UserServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash;执行环绕; advice-ref执行方法 . pointcut-ref切入点&ndash;&gt;-->
<!--        <aop:advisor advice-ref="beforelog" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->


    <!-- 方式二 自定义切面 aop的配置-->
    <aop:config>

        <!--切入点 expression:表达式匹配要执行的方法 -->
        <!--        execution(修饰符  返回值  包.类.方法名(参数) throws异常)-->
        <!--        execution(<修饰符模式>?<返回类型模式><方法名模式>(<参数模式>)<异常模式>?)-->
        <!--        execution(* dynamicProxy.UserServiceImpl.*(..))-->
        <!--        第一个 * 代表任意返回类型-->
        <!--        dynamicProxy.UserServiceImpl.* 代表匹配 UserServiceImpl下的所有方法-->
        <!--        (..) 代表 匹配任何数量参数-->
        <aop:aspect ref="customLog">
            <aop:pointcut id="customLogPointCut" expression="execution(* dynamicProxy.UserServiceImpl.*(..))"/>
            <aop:before pointcut-ref="customLogPointCut" method="before"/>
            <aop:after pointcut-ref="customLogPointCut" method="after"/>
        </aop:aspect>
    </aop:config>


</beans>